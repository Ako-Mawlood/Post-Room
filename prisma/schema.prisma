// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id              Int           @id @default(autoincrement())
  fullname        String?
  username        String?       @unique
  email           String        @unique
  isEmailVerified Boolean       @default(false)
  hashedPassword  String

  createdAt       DateTime      @default(now()) 
  updatedAt       DateTime      @updatedAt
  activateTokens  ActivateToken[]
  comments        Comment[]
  blogs           UserOnBlogs[]
  likes           LikeOnBlogs[]
  followers       Follows[] @relation("UserFollowers")
  followed        Follows[] @relation("UserFollowed")
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
  id          Int       @id @default(autoincrement())
  blogId      String?
  title       String
  content     String
  imageUrl    String?
  users       UserOnBlogs[]
  comments    Comment[]
  likes       LikeOnBlogs[]
  tags        TagsOnBlogs[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserOnBlogs {
  id          Int       @id @default(autoincrement())

  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Follows {
  id          Int       @id @default(autoincrement())

  user        User      @relation("UserFollowed", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  follower    User      @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String

  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model LikeOnBlogs {
  id          Int       @id @default(autoincrement())

  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String
  blogs       TagsOnBlogs[]
}

model TagsOnBlogs {
  id          Int       @id @default(autoincrement())


  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       Int
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int
}